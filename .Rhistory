### testing shiny
input <- NULL
## --- probability of staying the same stage
## adults
AA <- 1
## --- probability of transitioning stages
## larva to set
LS <- 1
## set to juvenile
SJ <- 1
## juvenile to adult
JA <- 0.8
input$JJ <- 1-JA
## ---- probability of reproducing annually
AL <- 1
##### --------- Natural Survival probabilities -------
## egg survival = function of ocean conditions
input$survE <- 0.001
## larva survival
input$survL <- 0.05
## set survival
input$survS <- 0.1
## juvenile survival
input$survJ <- 0.2
## adult survival
input$survA <- 0.3
##### ----------- Harvest rates ----------------------
## harvest rate on juveniles
input$hrJ <- 0.7
## harvest rate on adults
input$hrA <- 0.9
##### ----------- Other parameters -------------------
## fecundity (number of eggs produced by a single adult annually)
input$fec <- 4e6
## beach capacity = relative beach size (could increase above 1 from dredging or decrease from erosion or other factors)
input$capacity <- 1
## beach quality = relative quality (likely maximum at 1, would decrease below 1 due to driving on beach, runoff, horses, etc.)
input$quality <- 1
get_transitions <- function(input){
stages <- c("L", "S", "J", "A")
tmat <- matrix(0, nrow=length(stages), ncol=length(stages))
rownames(tmat) <- colnames(tmat) <- stages
#### ----------- from larva ---------------------------
## larva to set = probability of transitioning * larva survival * beach capacity metric * beach quality metric
LS <- 1
tmat["S","L"] <- LS * input$survL * input$capacity * input$quality
#### ----------- from set -----------------------------
## set to juvenile = probability of transitioning * set survival * beach quality metric
SJ <- 1
tmat["J","S"] <- SJ * input$survS * input$quality
#### ----------- from juvenile ------------------------
## juvenile to juvenile = probability of staying juvenile * juvenile survival * beach quality metric * probability of not being harvested
JJ <- 1-input$JA
tmat["J","J"] <- JJ * input$survJ * input$quality * (1 - input$hrJ)
## juvenile to adult = probability of transitioning * juvenile survival * beach quality metric * probability of not being harvested
tmat["A","J"] <- input$JA * input$survJ * input$quality * (1 - input$hrJ)
#### ----------- from adult ---------------------------
## adult to adult = probability of staying adult * adult survival * beach quality metric * probability of not being harvested
AA <- 1
tmat["A","A"] <- AA * input$survA * input$quality * (1 - input$hrA)
## eggs to larva = probability of an adult reproducing * fecundity * egg survival
AL <- 1
tmat["L","A"] <- AL * input$fec * input$survE
return(tmat)
}
get_abundances <- function(input, tmat){
## years to equilibrium
nyears <- 300
## initial population size by stage in numbers
initial <- c("L"=input$fec*input$survE, "S"=input$fec*input$survE*input$survL, "J"=input$fec*input$survE*input$survL*input$survS, "A"=input$fec*input$survE*input$survL*input$survJ)
## population matrix
stages <- c("L", "S", "J", "A")
pmat <- matrix(NA, nrow=nyears, ncol=(length(stages)+1))
colnames(pmat) <- c(stages, "lamda")
## start population at initial values in first year
pmat[1,] <- c(initial, NA)
## loop over years, starting with year 2
for(y in 2:nyears){
## larva = number of adults last year * number of surviving eggs
pmat[y, "L"] <- pmat[y-1, "A"] * tmat["L", "A"]
## sets = number of larva last year * joint probability of being a set this year
pmat[y, "S"] <- pmat[y-1, "L"] * tmat["S", "L"]
## juveniles = (number of sets last year * joint probability of being a juv this year if you were a set last year) + (number of juveniles last year * joint probability of being a juvenile this year if you were a juv last year)
pmat[y, "J"] <- (pmat[y-1, "S"] * tmat["J","S"]) + (pmat[y-1, "J"] * tmat["J", "J"])
## adults = (number of juveniles last year * joint probability of being an adult this year if you were a juv last year) + (number of adults last year * joint probability of being an adult this year if you were an adult last year)
pmat[y, "A"] <-  (pmat[y-1, "J"] * tmat["A", "J"]) + (pmat[y-1, "A"] * tmat["A", "A"])
## population growth rate
pmat[y, "lamda"] <- sum(pmat[y-1,1:length(stages)])/sum(pmat[y,1:length(stages)])
}
return(pmat)
}
tmat <- get_transitions(input=input)
JJ
input$JA
input <- NULL
## --- probability of staying the same stage
## adults
AA <- 1
## --- probability of transitioning stages
## larva to set
LS <- 1
## set to juvenile
SJ <- 1
## juvenile to adult
JJ <- 0.2
input$JA <- 1-JJ
## ---- probability of reproducing annually
AL <- 1
##### --------- Natural Survival probabilities -------
## egg survival = function of ocean conditions
input$survE <- 0.001
## larva survival
input$survL <- 0.05
## set survival
input$survS <- 0.1
## juvenile survival
input$survJ <- 0.2
## adult survival
input$survA <- 0.3
##### ----------- Harvest rates ----------------------
## harvest rate on juveniles
input$hrJ <- 0.7
## harvest rate on adults
input$hrA <- 0.9
##### ----------- Other parameters -------------------
## fecundity (number of eggs produced by a single adult annually)
input$fec <- 4e6
## beach capacity = relative beach size (could increase above 1 from dredging or decrease from erosion or other factors)
input$capacity <- 1
## beach quality = relative quality (likely maximum at 1, would decrease below 1 due to driving on beach, runoff, horses, etc.)
input$quality <- 1
tmat <- get_transitions(input=input)
tmat
pmat <- get_abundances(input=input, tmat=tmat)
head(pmat)
plot(pmat[,"lamda'"])
plot(pmat[,"lamda"])
par(mfrow=c(1,1))
plot(pmat[,'lamda'])
plot(x=1, y=1)
plot(pmat[,'lamda'])
plot(pmat[,'lamda'], type="l")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rsconnect::deployApp("C:\\Git_Projects\\razor_clam_pop")
shiny::runApp()
