install.packages("shinyBS")
shiny::runApp('C:/projects/LIME_shiny')
shiny::runApp('C:/projects/LIME_shiny')
install.packages("shinyFiles")
runApp('C:/projects/LIME_shiny')
C_t <- as.matrix(read.table(file.path("C:\\projects\\LIME_shiny\\data\\Catch_10yrs.csv", header=FALSE, sep=",", stringsAsFactors=FALSE, check.names=FALSE, row=1)))
C_t <- as.matrix(read.table(\"C:\\projects\\LIME_shiny\\data\\Catch_10yrs.csv", header=FALSE, sep=",", stringsAsFactors=FALSE, check.names=FALSE, row=1))
C_t <- as.matrix(read.table("C:\\projects\\LIME_shiny\\data\\Catch_10yrs.csv", header=FALSE, sep=",", stringsAsFactors=FALSE, check.names=FALSE, row=1))
C_t
dat <- C_t
C_t <- as.numeric(t(dat))
C_t
names(C_t) <- as.numeric(rownames(dat))
C_t
runApp('C:/projects/LIME_shiny')
runApp('C:/projects/razor_clam_pop')
runApp('C:/projects/razor_clam_pop')
runApp('C:/projects/razor_clam_pop')
runApp('C:/projects/razor_clam_pop')
runApp('C:/projects/razor_clam_pop')
runApp('C:/projects/razor_clam_pop')
runApp('C:/projects/razor_clam_pop')
runApp('C:/projects/razor_clam_pop')
runApp('C:/projects/razor_clam_pop')
runApp('C:/projects/razor_clam_pop')
runApp('C:/projects/razor_clam_pop')
runApp('C:/projects/razor_clam_pop')
runApp('C:/projects/razor_clam_pop')
runApp('C:/projects/razor_clam_pop')
webshot::install_phantomjs()
library(pandoc)
install.packages("pandoc")
library(pandoc)
devtools::install_github('rstudio/rmarkdown')
library(plyr)
library(reshape2)
shiny::runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
shiny::runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
shiny::runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
Inputs <- readRDS(file.path("C:\\merrill\\LIME_shiny\\results\\Inputs.rds"))
Report <- readRDS(file.path("C:\\merrill\\LIME_shiny\\results\\Report.rds"))
Sdreport <- readRDS(file.path("C:\\merrill\\LIME_shiny\\results\\Sdreport.rds"))
Inputs$Data$T_yrs
Inputs$Data$LC_yrs
lc <- read.csv(file.path("C:\\merrill\\LIME_shiny\\data\\LF_10yrs.csv"), header=TRUE, sep=",", stringsAsFactors = FALSE, check.names=FALSE, row=1)
head(lc)
lc_yrs <- as.numeric(rownames(lc))
lc_yrs
minyr <- min(lc_yrs)
maxyr <- max(lc_yrs)
minyr
maxyr
all_yrs <- minyr:maxyr
all_yrs
if(all_yrs[1]<1000) all_yrs <- 1:maxyr
all_yrs
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
shiny::runApp('C:/merrill/NZRLIC/lobster/shiny/mpeval')
install.packages("plotly")
runApp('C:/merrill/NZRLIC/lobster/shiny/mpeval')
install.packages("DT")
runApp('C:/merrill/NZRLIC/lobster/shiny/mpeval')
shiny::runApp('C:/merrill/NZRLIC/lobster/shiny/mpeval')
runApp('C:/merrill/NZRLIC/lobster/shiny/mpeval')
runApp('C:/merrill/NZRLIC/lobster/shiny/mpeval')
runApp('C:/merrill/NZRLIC/lobster/shiny/mpeval')
shiny::runApp('C:/merrill/NZRLIC/lobster/shiny/mpeval')
library(TMB)
library(rsconnect)
shiny::runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
shiny::runApp('C:/merrill/LIME_shiny')
runApp('C:/merrill/LIME_shiny')
install.packages("devtools", repos='http://cran.us.r-project.org')
library(LIME)
lh <- create_lh_list(vbk=0.21,
linf=65,
t0=-0.01,
lwa=0.0245,
lwb=2.79,
M=0.27,
M50=34,
M95=NULL,
maturity_input="length",
S50=20,
S95=26,
selex_input="length",
binwidth=1,
CVlen=0.1,
SigmaR=0.737,
SigmaF=0.2,
R0=1,
rho=0.43,
nseasons=1)
true <- generate_data(modpath=NULL,
itervec=1,
lh=lh,
Fdynamics="Ramp",
Rdynamics="AR",
Nyears=20,
Nyears_comp=20,
comp_sample=200,
init_depl=0.8,
seed=1)
## years with length data -- rename with your own years with length data
length_years <- rownames(true$LF)
## length bins -- rename with your upper length bins
length_bins <- colnames(true$LF)
## matrix with length frequency data
LF <- true$LF
years_short <- 11:20
LF_short <- LF[years_short,]
rownames(LF_short) <- years_short
catch_years <- names(true$Cw_t)
names(C_t) <- catch_years
true$Cw_t
C_t <- true$Cw_t
names(C_t) <- catch_years
C_t
catch_years <- names(true$Cw_t)
index_years <- names(true$I_t)
names(I_t) <- index_years
I_t
index_years <- names(true$I_t)
I_t <- true$I_t
names(I_t) <- index_years
length_years <- as.numeric(rownames(LF))
total_years <- min(length_years):max(length_years)
data_list <- list("years"=total_years, "LF"=LF)
catch_years <- as.numeric(names(C_t))
## years with index data, make sure they are numbers and not characters
index_years <- as.numeric(names(I_t))
## find minimum year across all data types
min_yr <- min(c(length_years, catch_years, index_years))
## find maximum year across all data types
max_yr <- max(c(length_years, catch_years, index_years))
total_years <- min_yr:max_yr
data_list <- list("years"=total_years, "LF"=LF, "C_t"=C_t, "I_t"=I_t)
data_list
res_rich <- run_LIME(modpath=NULL,
lh=lh,
input_data=data_list,
est_sigma="log_sigma_R",
data_avail="Index_Catch_LC",
C_opt=2)
modpath=NULL
lh
input_data=data_list
data_list
est_sigma
est_sigma="log_sigma_R"
data_avail="Index_Catch_LC"
C_opt=2
itervec=NULL
rewrite=TRUE
simulation=FALSE
param_adjust=FALSE
val_adjust=FALSE
f_true=FALSE
fix_param=FALSE
fix_param_t
fix_param_t=FALSE
F_up=10
S50_up=10
LFdist=1
derive_quants=FALSE
S_l_input=-1
theta_type=1
randomR=TRUE
Fpen=1
SigRpen=1
newtonsteps=3
if(simulation==FALSE) itervec <- 1
if(simulation==TRUE & is.null(itervec)) stop("Must specify number of iterations for simulation")
iter
iter=1
if(simulation==TRUE & is.null(modpath)==FALSE) iterpath <- file.path(modpath, iter)
if(simulation==TRUE & is.null(modpath)) iterpath <- NULL
if(simulation==FALSE & is.null(modpath)==FALSE) iterpath <- modpath
if(simulation==FALSE & is.null(modpath)) iterpath <- NULL
if(rewrite==FALSE & is.null(modpath)==FALSE){
if(file.exists(file.path(iterpath, "Sdreport.rds"))) next
if(file.exists(file.path(iterpath, "NAs_final_gradient.txt"))) next
if(file.exists(file.path(iterpath, "high_final_gradient.txt"))) next
}
if(rewrite==TRUE & is.null(modpath)==FALSE){
if(file.exists(file.path(iterpath, "NAs_final_gradient.txt"))) unlink(file.path(iterpath, "NAs_final_gradient.txt"), TRUE)
if(file.exists(file.path(iterpath, "high_final_gradient.txt"))) unlink(file.path(iterpath, "high_final_gradient.txt"), TRUE)
if(file.exists(file.path(iterpath, "model_NA.txt"))) unlink(file.path(iterpath, "model_NA.txt"), TRUE)
}
if(simulation==TRUE & is.null(modpath)==FALSE){
sim <- readRDS(file.path(iterpath, "True.rds"))
if(f_true==TRUE) f_inits <- sim$F_t
if(f_true==FALSE) f_inits <- NULL
if(C_opt==0) C_t_input <- NULL
if(C_opt==1) C_t_input <- sim$C_t
if(C_opt==2) C_t_input <- sim$Cw_t
if(LFdist==0) obs_input <- sim$obs_per_year
if(LFdist==1) obs_input <- rep(0, sim$Nyears)
true_nt <- sim$Nyears/sim$nseasons
s_all <- as.vector(sapply(1:true_nt, function(x) rep(x,sim$nseasons)))
years_i <- s_all[as.numeric(rownames(sim$LF))]
input_data <- list("years"=1:sim$Nyears, "LF"=sim$LF, "years_i"=years_i, "I_t"=sim$I_t, "C_t"=C_t_input, "F_t"=f_inits)
}
lh_new <- lh
if("SigmaR" %in% param_adjust){
lh_new[["SigmaR"]] <- val_adjust[which(param_adjust=="SigmaR")]
}
if("SigmaF" %in% param_adjust){
lh_new[["SigmaF"]] <- val_adjust[which(param_adjust=="SigmaF")]
}
if("SigmaC" %in% param_adjust){
lh_new[["SigmaC"]] <- val_adjust[which(param_adjust=="SigmaC")]
}
if("SigmaI" %in% param_adjust){
lh_new[["SigmaI"]] <- val_adjust[which(param_adjust=="SigmaI")]
}
if("CVlen" %in% param_adjust){
lh_new[["CVlen"]] <- val_adjust[which(param_adjust=="CVlen")]
}
if("M" %in% param_adjust){
lh_new <- create_lh_list(vbk=lh_new$vbk, linf=lh_new$linf, t0=lh_new$t0, lwa=lh_new$lwa, lwb=lh_new$lwb, S50=lh_new$SL50, S95=lh_new$SL95, selex_input="length", M50=lh_new$ML50, M95=lh_new$ML95, maturity_input="length", M=val_adjust[which(param_adjust=="M")], binwidth=lh_new$binwidth, CVlen=lh_new$CVlen, SigmaC=lh_new$SigmaC, SigmaI=lh_new$SigmaI, SigmaR=lh_new$SigmaR, SigmaF=lh_new$SigmaF, R0=lh_new$R0, h=lh_new$h, qcoef=lh_new$qcoef, F1=lh_new$F1, start_ages=lh_new$ages[1], rho=lh_new$rho, nseasons=lh_new$nseasons)
}
if("linf" %in% param_adjust){
lh_new <- create_lh_list(vbk=lh_new$vbk, linf=val_adjust[which(param_adjust=="linf")], t0=lh_new$t0, lwa=lh_new$lwa, lwb=lh_new$lwb, S50=lh_new$SL50, S95=lh_new$SL95, selex_input="length", M50=lh_new$ML50, M95=lh_new$ML95, maturity_input="length", M=lh_new$M*lh_new$nseasons, binwidth=lh_new$binwidth, CVlen=lh_new$CVlen, SigmaC=lh_new$SigmaC, SigmaI=lh_new$SigmaI, SigmaR=lh_new$SigmaR, SigmaF=lh_new$SigmaF, R0=lh_new$R0, h=lh_new$h, qcoef=lh_new$qcoef, F1=lh_new$F1, start_ages=lh_new$ages[1], rho=lh_new$rho, nseasons=lh_new$nseasons)
}
if("vbk" %in% param_adjust){
lh_new <- create_lh_list(vbk=val_adjust[which(param_adjust=="vbk")], linf=lh_new$linf, t0=lh_new$t0, lwa=lh_new$lwa, lwb=lh_new$lwb, S50=lh_new$SL50, S95=lh_new$SL95, selex_input="length", M50=lh_new$ML50, M95=lh_new$ML95, maturity_input="length", M=lh_new$M*lh_new$nseasons, binwidth=lh_new$binwidth, CVlen=lh_new$CVlen, SigmaC=lh_new$SigmaC, SigmaI=lh_new$SigmaI, SigmaR=lh_new$SigmaR, SigmaF=lh_new$SigmaF, R0=lh_new$R0, h=lh_new$h, qcoef=lh_new$qcoef, F1=lh_new$F1, start_ages=lh_new$ages[1], rho=lh_new$rho, nseasons=lh_new$nseasons)
}
if("ML50" %in% param_adjust){
lh_new <- create_lh_list(vbk=lh_new$vbk, linf=lh_new$linf, t0=lh_new$t0, lwa=lh_new$lwa, lwb=lh_new$lwb, S50=lh_new$SL50, S95=lh_new$SL95, selex_input="length", M50=val_adjust[which(param_adjust=="ML50")], M95=NULL, maturity_input="length", M=lh_new$M*lh_new$nseasons, binwidth=lh_new$binwidth, CVlen=lh_new$CVlen, SigmaC=lh_new$SigmaC, SigmaI=lh_new$SigmaI, SigmaR=lh_new$SigmaR, SigmaF=lh_new$SigmaF, R0=lh_new$R0, h=lh_new$h, qcoef=lh_new$qcoef, F1=lh_new$F1, start_ages=lh_new$ages[1], rho=lh_new$rho, nseasons=lh_new$nseasons)
}
if(all(param_adjust==FALSE)==FALSE){
if(any(param_adjust %in% c("CVlen", "SigmaI", "SigmaC", "SigmaF", "SigmaR", "M", "linf", "vbk", "ML50") == FALSE)) stop("cannot internally adjust some parameters. create new life history list before entering into LIME model")
}
## check that inputs in right format
inits <- create_inputs(lh=lh_new, input_data=input_data)
Nyears <- inits$Nyears
Sdreport <- NA
ParList <- NA
df <- NULL
if(f_true==TRUE) Fpen <- 0
if(f_true==FALSE) Fpen <- 1
# if(inits$SigmaR > 0.05) SigRpen <- 0
# if(inits$SigmaR <= 0.05) SigRpen <- 1
if(is.null(modpath)) output <- NULL
TmbList <- format_input(input=inits, data_avail=data_avail, Fpen=Fpen, SigRpen=SigRpen, SigRprior=c(inits$SigmaR, 0.353), est_sigma=est_sigma, f_startval=inits$F_t, fix_param=fix_param, fix_param_t=fix_param_t, C_opt=C_opt, LFdist=LFdist, S_l_input=S_l_input, theta_type=theta_type, randomR=randomR)
if(is.null(modpath)==FALSE) saveRDS(TmbList, file.path(iterpath, "Inputs.rds"))
if(is.null(modpath)) output$Inputs <- TmbList
if(all(is.na(ParList))) ParList <- TmbList[["Parameters"]]
input=inits
SigRprior=c(inits$SigmaR, 0.353)
f_startval=inits$Frate
f_startval=inits$F_t
attach(input)
input$Cw_t
lh
input_data
shiny::runApp('C:/merrill/razor_clam_pop')
runApp('C:/merrill/razor_clam_pop')
runApp('C:/merrill/razor_clam_pop')
runApp('C:/merrill/razor_clam_pop')
runApp('C:/merrill/razor_clam_pop')
runApp('C:/merrill/razor_clam_pop')
getOption("shinyapps.service_url")
options(shinyapps.http.trace=TRUE)
options(shinyapps.service_url = "http://api.shinyapps.io/v1")
deployApp()
getOption('shinyapps.service_url')
runApp('C:/merrill/razor_clam_pop')
library(shiny)
deployApp()
deployApp
getwd()
setwd("C:\\merrill\\razor_clam_pop")
install.packages("Shiny")
library(rsconnect)
deployApp()
runApp()
