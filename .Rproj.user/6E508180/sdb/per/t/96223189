{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\n\nshinyServer(function(input, output) {\n  \n  get_transitions <- function(input){\n    \n    stages <- c(\"L\", \"S\", \"J\", \"A\")\n    tmat <- matrix(0, nrow=length(stages), ncol=length(stages))\n    rownames(tmat) <- colnames(tmat) <- stages\n    \n    #### ----------- from larva ---------------------------\n    tmat[\"L\",\"L\"] <- input$LL * input$survL * input$capacity * input$quality\n    \n    ## larva to set = probability of transitioning * larva survival * beach capacity metric * beach quality metric\n    tmat[\"S\",\"L\"] <- input$LS * input$survL * input$capacity * input$quality\n    \n    #### ----------- from set -----------------------------\n    tmat[\"S\",\"S\"] <- input$SS * input$survS * input$quality\n    \n    ## set to juvenile = probability of transitioning * set survival * beach quality metric\n    tmat[\"J\",\"S\"] <- input$SJ * input$survS * input$quality\n    \n    #### ----------- from juvenile ------------------------\n    ## juvenile to juvenile = probability of staying juvenile * juvenile survival * beach quality metric * probability of not being harvested\n    tmat[\"J\",\"J\"] <- input$JJ * input$survJ * input$quality * (1 - input$hrJ)\n    \n    ## juvenile to adult = probability of transitioning * juvenile survival * beach quality metric * probability of not being harvested\n    tmat[\"A\",\"J\"] <- input$JA * input$survJ * input$quality * (1 - input$hrJ)\n    \n    #### ----------- from adult ---------------------------\n    ## adult to adult = probability of staying adult * adult survival * beach quality metric * probability of not being harvested\n    AA <- 1\n    tmat[\"A\",\"A\"] <- AA * input$survA * input$quality * (1 - input$hrA)\n    \n    ## eggs to larva = probability of an adult reproducing * fecundity * egg survival\n    tmat[\"L\",\"A\"] <- input$AL * input$fec * input$survE\n    \n    return(tmat)\n    \n  }\n  \n  get_abundances <- function(input, tmat, nyears, stochastic=FALSE, sd=0.6, seed=123){\n    \n    ## initial population size by stage in numbers\n    initial <- c(\"L\"=input$fec*input$survE, \"S\"=input$fec*input$survE*input$survL, \"J\"=input$fec*input$survE*input$survL*input$survS, \"A\"=input$fec*input$survE*input$survL*input$survJ)\n    \n    ## population matrix\n    stages <- c(\"L\", \"S\", \"J\", \"A\")\n    pmat <- matrix(NA, nrow=nyears, ncol=(length(stages)+1))\n    colnames(pmat) <- c(stages, \"lamda\")\n    \n    ## start population at initial values in first year\n    pmat[1,] <- c(initial, NA)\n    \n    set.seed(seed)\n    dev <- rnorm(nyears,0,sd)\n    \n    ## loop over years, starting with year 2\n    for(y in 2:nyears){\n      \n      ## larva = number of adults last year * number of surviving eggs\n      if(stochastic==TRUE) pmat[y, \"L\"] <- (pmat[y-1, \"A\"] * tmat[\"L\", \"A\"] + pmat[y-1, \"L\"] * tmat[\"L\", \"L\"])*exp(dev[y])\n      if(stochastic==FALSE) pmat[y, \"L\"] <- (pmat[y-1, \"A\"] * tmat[\"L\", \"A\"])\n      \n      ## sets = number of larva last year * joint probability of being a set this year\n      pmat[y, \"S\"] <- (pmat[y-1, \"L\"] * tmat[\"S\", \"L\"]) + (pmat[y-1, \"S\"] * tmat[\"S\", \"S\"])\n      \n      ## juveniles = (number of sets last year * joint probability of being a juv this year if you were a set last year) + (number of juveniles last year * joint probability of being a juvenile this year if you were a juv last year)\n      pmat[y, \"J\"] <- (pmat[y-1, \"S\"] * tmat[\"J\",\"S\"]) + (pmat[y-1, \"J\"] * tmat[\"J\", \"J\"])\n      \n      ## adults = (number of juveniles last year * joint probability of being an adult this year if you were a juv last year) + (number of adults last year * joint probability of being an adult this year if you were an adult last year)\n      pmat[y, \"A\"] <-  (pmat[y-1, \"J\"] * tmat[\"A\", \"J\"]) + (pmat[y-1, \"A\"] * tmat[\"A\", \"A\"])\n      \n      ## population growth rate\n      pmat[y, \"lamda\"] <- sum(pmat[y-1,1:length(stages)])/sum(pmat[y,1:length(stages)])\n      \n    }\n    \n    return(pmat)\n  }\n\n  output$GrowthRate <- renderPlot({\n    tmat <- get_transitions(input=input)\n    pmat <- get_abundances(input=input, tmat=tmat, nyears=300, stochastic=FALSE)\n    plot(pmat[,\"lamda\"], type=\"l\", lty=2, xlab=\"Year\", ylab=\"Population growth rate\", lwd=2)\n    abline(h=1, col=\"red\", lwd=3)\n  })\n  \n  output$StochasticGrowthRate <- renderPlot({\n    tmat <- get_transitions(input=input)\n    pmat <- get_abundances(input=input, tmat=tmat, nyears=400, stochastic=TRUE, sd=input$sd)\n    plot(pmat[301:400,\"lamda\"], type=\"l\", lty=2, xlab=\"Year\", ylab=\"Population growth rate\", ylim=c(0,3))\n    for(i in 2:input$nsim){\n      pmat <- get_abundances(input=input, tmat=tmat, nyears=400, stochastic=TRUE, sd=input$sd, seed=i)\n      lines(pmat[301:400,\"lamda\"], type=\"l\", lty=2, col=i)\n    }\n    abline(h=1, col=\"red\", lwd=2)\n  })\n  \n  output$StochasticAbundance <- renderPlot({\n    tmat <- get_transitions(input=input)\n    pmat <- get_abundances(input=input, tmat=tmat, nyears=400, stochastic=TRUE, sd=input$sd)\n    plot(pmat[301:400,\"A\"], type=\"l\", lty=2, xlab=\"Year\", ylab=\"Adult abundance\")\n#     for(i in 2:input$nsim){\n#       pmat <- get_abundances(input=input, tmat=tmat, nyears=400, stochastic=TRUE, sd=input$sd, seed=i)\n#       lines(pmat[301:400,\"A\"], type=\"l\", lty=2, col=i)\n#     }\n  })\n  \n\n  \n})",
    "created" : 1460484072446.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1162370792",
    "id" : "96223189",
    "lastKnownWriteTime" : 1463005137,
    "path" : "C:/Git_Projects/razor_clam_pop/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}